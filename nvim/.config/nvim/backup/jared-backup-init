

if has("termguicolors")     " set true colors
    set t_8f=\[[38;2;%lu;%lu;%lum
    set termguicolors
    set t_8b=\[[48;2;%lu;%lu;%lum
endif

" download vim-plug if missing
" todo: check to see if this works



" Install nvim-cmp
Plug 'hrsh7th/nvim-cmp'

" Install snippet engine (This example installs [hrsh7th/vim-vsnip](https://github.com/hrsh7th/vim-vsnip))
Plug 'hrsh7th/vim-vsnip'

" Install the buffer completion source
Plug 'hrsh7th/cmp-buffer'


  Plug 'junegunn/rainbow_parentheses.vim'
  " automatically run :RainbowParentheses on neovim startup
  augroup autoStartRainbow
    au! VimEnter * nested RainbowParentheses
  augroup end

  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
    " Find files using Telescope command-line sugar.
    nnoremap <leader>ff <cmd>Telescope find_files<cr>
    nnoremap <leader>fg <cmd>Telescope live_grep<cr>
    nnoremap <leader>fb <cmd>Telescope buffers<cr>
    nnoremap <leader>fh <cmd>Telescope help_tags<cr>
    nnoremap <leader>fe <cmd>Telescope file_browser<cr>

  Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

  " visually see your registers.  Control-R, or " or @ to see 
  Plug 'junegunn/vim-peekaboo'

  " dope color scheme
  Plug 'sainnhe/sonokai'

  " better syntax highlighting
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  " surround text
  Plug 'tpope/vim-surround'

  " increment / decrement numbers and dates
  " Control+a Control+x
   Plug 'tpope/vim-speeddating'

  " lets me find my path in large JSON files
  " leader+d leader+g
  Plug 'mogelbrod/vim-jsonpath'
    " for only json files, the followiung mappings will work:
    au FileType json noremap <buffer> <silent> <leader>d :call jsonpath#echo()<CR>
    au FileType json noremap <buffer> <silent> <leader>g :call jsonpath#goto()<CR>


  " Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
    " nmap <Leader>py <Plug>(Prettier)
    " autocmd BufWritePre *.js,*.jsx,*.json,*.md,*.yaml,*.html PrettierAsync
     " autocmd TextChanged,InsertLeave *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync
	
  " python formatting using black
  " Plug 'psf/black', { 'branch': 'stable' }
    " autocmd BufWritePre *.py execute ':Black'
  
  " couldn't get this working very well
  " Plug 'puremourning/vimspector'

	" easy commenting of lines
	Plug 'preservim/nerdcommenter'
	let g:NERDSpaceDelims = 1
	let g:NERDToggleCheckAllLines = 1

	" map Control+/ to toggle comments


  Plug 'neovim/nvim-lspconfig'
  Plug 'kabouzeid/nvim-lspinstall'

  " completion thing
  " Plug 'hrsh7th/nvim-compe'
  " Plug 'windwp/nvim-autopairs'


  Plug 'glepnir/lspsaga.nvim'
  Plug 'simrat39/symbols-outline.nvim'
  
  " cool buffer bars
  Plug 'kyazdani42/nvim-web-devicons'
  Plug 'romgrk/barbar.nvim'

  " " better status line
  " Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}

  " requires
  Plug 'kyazdani42/nvim-web-devicons' " for file icons
  Plug 'kyazdani42/nvim-tree.lua'

  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'mhinz/vim-signify'




lua << EOF
require'lspinstall'.setup() -- important

local servers = require'lspinstall'.installed_servers()
for _, server in pairs(servers) do
  require'lspconfig'[server].setup{}
end
EOF






lua << EOF
-- require'lspconfig'.pyright.setup{}
-- require("nvim-autopairs.completion.compe").setup({
--   map_cr = true, --  map <CR> on insert mode
--   map_complete = true, -- it will auto insert `(` after select function or method item
--   auto_select = false,  -- auto select first item
-- })
EOF

" Important!!

" The configuration options should be placed before `colorscheme sonokai`.
let g:sonokai_style = 'atlantis'
"let g:sonokai_enable_italic = 0
"let g:sonokai_disable_italic_comment = 1
colorscheme sonokai

" remap jk to escape
imap jk <Esc>
" remap leader c to close window - kind of slow though

" LSP config (the mappings used in the default file don't quite work right)
" nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<CR>
" nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
" nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
" nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent> <C-n> <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
" nnoremap <silent> <C-p> <cmd>lua vim.lsp.diagnostic.goto_next()<CR>

" move between buffers
nmap <TAB> :bnext<CR>
nmap <S-TAB> :bprev<CR>

" close the current buffer
" nmap <leader>c :bd!<CR>

" shortcut to save
nmap <leader>w :w<cr>

" shortcut to quit
nmap <leader>q :q!<cr>

" shortcut to write and then quit
nmap <leader>z :wq!<cr>

" edit ~/.config/nvim/init.vim
map <leader>ev :e! ~/.config/nvim/init.vim<cr>




" paste over selected text, sending highlighted text to black hole
noremap <leader>p "_dP
 
" clear highlights
nmap <leader><leader> :set hlsearch! hlsearch?<cr>


" cycle through popup menus with c-j and c-k
" cnoremap <expr> <C-j> wildmenumode() ? "\<C-n>":"\<Down>"
" cnoremap <expr> <C-k> wildmenumode() ? "\<C-p>":"\<Up>"
